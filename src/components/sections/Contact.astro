---
import Button from "../ui/Button.astro";
---

<section id="contacto" class="section-padding bg-gradient-to-t from-gray-900/50 to-transparent animate-on-scroll">
   <div class="container mx-auto px-6">
      <h2 class="section-title text-4xl font-bold text-center mb-16 gradient-text">Contacto</h2>

      <div class="grid md:grid-cols-2 gap-12 max-w-6xl mx-auto">
         <div class="contact-info stagger-container">
            <h3 class="text-2xl font-semibold mb-6 text-white">¡Hablemos!</h3>
            <p class="text-gray-300 mb-8 text-lg leading-relaxed">
               ¿Tienes un proyecto en mente? Me encantaría escuchar tus ideas y ayudarte a crear algo increíble juntos.
            </p>

            <div class="contact-links space-y-4">
               <a
                  href="mailto:nahueltorrezg@gmail.com"
                  class="contact-link flex items-center gap-4 p-4 rounded-lg bg-gray-800/30 backdrop-blur-sm border border-gray-700/50 hover-lift transition-all duration-300"
               >
                  <div class="contact-icon w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center">
                     <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                           stroke-linecap="round"
                           stroke-linejoin="round"
                           stroke-width="2"
                           d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                     </svg>
                  </div>
                  <div>
                     <h4 class="text-white font-medium">Email</h4>
                     <p class="text-gray-400">nahueltorrezg@gmail.com</p>
                  </div>
               </a>

               <a
                  href="https://github.com/NahuelTG"
                  target="_blank"
                  class="contact-link flex items-center gap-4 p-4 rounded-lg bg-gray-800/30 backdrop-blur-sm border border-gray-700/50 hover-lift transition-all duration-300"
               >
                  <div class="contact-icon w-12 h-12 bg-gray-700 rounded-lg flex items-center justify-center">
                     <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                        <path
                           d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
                        ></path>
                     </svg>
                  </div>
                  <div>
                     <h4 class="text-white font-medium">GitHub</h4>
                     <p class="text-gray-400">@NahuelTG</p>
                  </div>
               </a>

               <a
                  href="https://www.linkedin.com/in/nahuel-torrez-guzman-7b1261248"
                  target="_blank"
                  class="contact-link flex items-center gap-4 p-4 rounded-lg bg-gray-800/30 backdrop-blur-sm border border-gray-700/50 hover-lift transition-all duration-300"
               >
                  <div class="contact-icon w-12 h-12 bg-blue-700 rounded-lg flex items-center justify-center">
                     <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                        <path
                           d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
                        ></path>
                     </svg>
                  </div>
                  <div>
                     <h4 class="text-white font-medium">LinkedIn</h4>
                     <p class="text-gray-400">@Nahuel Torrez Guzman</p>
                  </div>
               </a>
            </div>
         </div>

         <div class="contact-form">
            <!-- Notificación de estado -->
            <div id="form-notification" class="hidden mb-6 p-4 rounded-lg border">
               <div class="flex items-center gap-3">
                  <div id="notification-icon"></div>
                  <div>
                     <h4 id="notification-title" class="font-medium"></h4>
                     <p id="notification-message" class="text-sm"></p>
                  </div>
               </div>
            </div>

            <form id="contact-form" class="space-y-6 stagger-container">
               <div class="form-group">
                  <label for="name" class="block text-white font-medium mb-2">Nombre</label>
                  <input
                     type="text"
                     id="name"
                     name="name"
                     required
                     class="form-input w-full px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 transition-all duration-300"
                     placeholder="Tu nombre"
                  />
                  <span class="error-message text-red-400 text-sm hidden"></span>
               </div>

               <div class="form-group">
                  <label for="email" class="block text-white font-medium mb-2">Email</label>
                  <input
                     type="email"
                     id="email"
                     name="email"
                     required
                     class="form-input w-full px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 transition-all duration-300"
                     placeholder="tu@email.com"
                  />
                  <span class="error-message text-red-400 text-sm hidden"></span>
               </div>

               <div class="form-group">
                  <label for="message" class="block text-white font-medium mb-2">Mensaje</label>
                  <textarea
                     id="message"
                     name="message"
                     rows="5"
                     required
                     class="form-input w-full px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 transition-all duration-300 resize-none"
                     placeholder="Cuéntame sobre tu proyecto..."></textarea>
                  <span class="error-message text-red-400 text-sm hidden"></span>
               </div>

               <button
                  type="submit"
                  id="submit-btn"
                  class="w-full px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-medium rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-300 hover-lift flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
               >
                  <span id="btn-text">Enviar Mensaje</span>
                  <svg id="btn-spinner" class="hidden animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
                     <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" class="opacity-25"></circle>
                     <path
                        fill="currentColor"
                        d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        class="opacity-75"></path>
                  </svg>
               </button>
            </form>
         </div>
      </div>
   </div>
</section>

<script>
   document.addEventListener("DOMContentLoaded", function () {
      const form = document.getElementById("contact-form") as HTMLFormElement | null;
      const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement | null;
      const btnText = document.getElementById("btn-text") as HTMLSpanElement | null;
      const btnSpinner = document.getElementById("btn-spinner") as HTMLElement | null;
      const notification = document.getElementById("form-notification") as HTMLDivElement | null;
      const notificationIcon = document.getElementById("notification-icon") as HTMLDivElement | null;
      const notificationTitle = document.getElementById("notification-title") as HTMLHeadingElement | null;
      const notificationMessage = document.getElementById("notification-message") as HTMLParagraphElement | null;

      // Verificar que todos los elementos existen
      if (
         !form ||
         !submitBtn ||
         !btnText ||
         !btnSpinner ||
         !notification ||
         !notificationIcon ||
         !notificationTitle ||
         !notificationMessage
      ) {
         console.error("No se pudieron encontrar todos los elementos del formulario");
         return;
      }

      // Función para mostrar notificaciones
      function showNotification(type: "success" | "error", title: string, message: string): void {
         if (!notification || !notificationIcon || !notificationTitle || !notificationMessage) return;

         notification.className = `mb-6 p-4 rounded-lg border ${
            type === "success" ? "bg-green-900/50 border-green-600 text-green-100" : "bg-red-900/50 border-red-600 text-red-100"
         }`;

         notificationIcon.innerHTML =
            type === "success"
               ? '<svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
               : '<svg class="w-6 h-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';

         notificationTitle.textContent = title;
         notificationMessage.textContent = message;
         notification.classList.remove("hidden");

         // Auto-ocultar después de 5 segundos
         setTimeout(() => {
            if (notification) {
               notification.classList.add("hidden");
            }
         }, 5000);
      }

      // Función para validar el formulario
      function validateForm(): boolean {
         const nameInput = document.getElementById("name") as HTMLInputElement | null;
         const emailInput = document.getElementById("email") as HTMLInputElement | null;
         const messageInput = document.getElementById("message") as HTMLTextAreaElement | null;

         if (!nameInput || !emailInput || !messageInput) {
            console.error("No se pudieron encontrar los campos del formulario");
            return false;
         }

         const name = nameInput.value.trim();
         const email = emailInput.value.trim();
         const message = messageInput.value.trim();

         let isValid = true;

         // Limpiar errores previos
         document.querySelectorAll(".error-message").forEach((el: Element) => {
            el.classList.add("hidden");
            const prevElement = el.previousElementSibling as HTMLElement | null;
            if (prevElement) {
               prevElement.classList.remove("border-red-500");
            }
         });

         if (!name) {
            showFieldError("name", "El nombre es requerido");
            isValid = false;
         }

         if (!email || !isValidEmail(email)) {
            showFieldError("email", "Ingresa un email válido");
            isValid = false;
         }

         if (!message || message.length < 10) {
            showFieldError("message", "El mensaje debe tener al menos 10 caracteres");
            isValid = false;
         }

         return isValid;
      }

      function showFieldError(fieldId: string, message: string): void {
         const field = document.getElementById(fieldId) as HTMLInputElement | HTMLTextAreaElement | null;
         if (!field) return;

         const errorSpan = field.nextElementSibling as HTMLSpanElement | null;

         field.classList.add("border-red-500");
         if (errorSpan && errorSpan.classList.contains("error-message")) {
            errorSpan.textContent = message;
            errorSpan.classList.remove("hidden");
         }
      }

      function isValidEmail(email: string): boolean {
         return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
      }

      // Manejador del envío del formulario
      form.addEventListener("submit", async function (e: Event) {
         e.preventDefault();

         if (!validateForm()) return;

         const nameInput = document.getElementById("name") as HTMLInputElement | null;
         const emailInput = document.getElementById("email") as HTMLInputElement | null;
         const messageInput = document.getElementById("message") as HTMLTextAreaElement | null;

         if (!nameInput || !emailInput || !messageInput || !submitBtn || !btnText || !btnSpinner) {
            showNotification("error", "Error", "No se pudieron obtener los datos del formulario");
            return;
         }

         // Cambiar estado del botón a loading
         submitBtn.disabled = true;
         btnText.textContent = "Enviando...";
         btnSpinner.classList.remove("hidden");

         try {
            // OPCIÓN 1: Formspree
            const response = await fetch("https://formspree.io/f/xkgzoldq", {
               method: "POST",
               headers: {
                  "Content-Type": "application/json",
               },
               body: JSON.stringify({
                  name: nameInput.value,
                  email: emailInput.value,
                  message: messageInput.value,
               }),
            });

            if (response.ok) {
               showNotification("success", "¡Mensaje enviado!", "Gracias por contactarme. Te responderé pronto.");
               if (form) {
                  form.reset();
               }
            } else {
               throw new Error("Error en el envío");
            }

            // OPCIÓN 2: Netlify Forms (Descomenta si usas Netlify)
            /*
         const formData = new FormData(form);
         const response = await fetch('/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams(formData).toString()
         });
         
         if (response.ok) {
            showNotification('success', '¡Mensaje enviado!', 'Gracias por contactarme. Te responderé pronto.');
            form.reset();
         } else {
            throw new Error('Error en el envío');
         }
         */
         } catch (error) {
            console.error("Error:", error);

            // OPCIÓN 3: Fallback a mailto (siempre funciona)
            const subject = `Mensaje de ${nameInput.value}`;
            const body = `Nombre: ${nameInput.value}\nEmail: ${emailInput.value}\n\nMensaje:\n${messageInput.value}`;
            const mailtoLink = `mailto:nahueltorrezg@gmail.com?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;

            window.open(mailtoLink);
            showNotification("success", "Cliente de email abierto", "Se ha abierto tu cliente de email con el mensaje prellenado.");
         } finally {
            // Restaurar estado del botón
            submitBtn.disabled = false;
            btnText.textContent = "Enviar Mensaje";
            btnSpinner.classList.add("hidden");
         }
      });

      // Limpiar errores cuando el usuario escribe
      document.querySelectorAll(".form-input").forEach((input: Element) => {
         const inputElement = input as HTMLInputElement | HTMLTextAreaElement;
         inputElement.addEventListener("input", function () {
            this.classList.remove("border-red-500");
            const errorSpan = this.nextElementSibling as HTMLSpanElement | null;
            if (errorSpan && errorSpan.classList.contains("error-message")) {
               errorSpan.classList.add("hidden");
            }
         });
      });
   });
</script>

<style>
   .contact-link:hover .contact-icon {
      transform: scale(1.1) rotate(5deg);
   }

   .form-input:focus {
      transform: translateY(-2px);
      box-shadow: 0 10px 20px rgba(0, 212, 255, 0.1);
   }

   .form-group {
      position: relative;
   }

   .form-group::before {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      width: 0;
      height: 2px;
      background: linear-gradient(90deg, #00d4ff, #ff6b6b);
      transition: width 0.3s ease;
   }

   .form-group:focus-within::before {
      width: 100%;
   }

   /* Animación del spinner */
   @keyframes spin {
      from {
         transform: rotate(0deg);
      }
      to {
         transform: rotate(360deg);
      }
   }

   .animate-spin {
      animation: spin 1s linear infinite;
   }
</style>
