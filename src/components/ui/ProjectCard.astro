---
export interface Props {
   title: string;
   description: string;
   image: string;
   technologies: string[];
   liveUrl?: string;
   codeUrl?: string;
   isImmersive?: boolean;
   isPersonal?: boolean;
   category?: string;
   year?: string;
   event?: string;
   location?: string;
}

const {
   title,
   description,
   image,
   technologies,
   liveUrl,
   codeUrl,
   isImmersive = false,
   isPersonal = false,
   category,
   year,
   event,
   location,
} = Astro.props;
---

<div class="project-card card-3d hover-lift">
   <div class="card-3d-inner">
      <div class="project-image-container relative overflow-hidden rounded-t-xl">
         <img
            src={image || "/placeholder.svg"}
            alt={title}
            class="project-image w-full h-48 object-cover transition-transform duration-500"
         />

         <!-- Category Badge -->
         {
            category && (
               <div class="absolute top-3 left-3">
                  <span class="category-badge bg-black/60 backdrop-blur-sm text-white px-3 py-1 rounded-full text-xs font-medium border border-white/20">
                     {category}
                  </span>
               </div>
            )
         }

         <!-- Year Badge -->
         {
            year && (
               <div class="absolute top-3 right-3">
                  <span class="year-badge bg-blue-600/80 backdrop-blur-sm text-white px-2 py-1 rounded text-xs font-medium">{year}</span>
               </div>
            )
         }

         <!-- Project Overlay -->
         <div
            class="project-overlay absolute inset-0 bg-gradient-to-t from-black/80 to-transparent opacity-0 transition-opacity duration-300"
         >
            <div class="absolute bottom-4 left-4 right-4">
               {
                  isImmersive ? (
                     <button class="demo-button bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors w-full">
                        <span class="flex items-center justify-center gap-2">
                           <span>Ver Demo</span>
                           <span class="text-lg">ü•Ω</span>
                        </span>
                     </button>
                  ) : (
                     <div class="flex gap-2">
                        {liveUrl && (
                           <a
                              href={liveUrl}
                              target="_blank"
                              class="live-button bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors flex-1 text-center"
                           >
                              <span class="flex items-center justify-center gap-1">
                                 <span>Live</span>
                                 <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path
                                       stroke-linecap="round"
                                       stroke-linejoin="round"
                                       stroke-width="2"
                                       d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                                    />
                                 </svg>
                              </span>
                           </a>
                        )}
                        {codeUrl && (
                           <a
                              href={codeUrl}
                              target="_blank"
                              class="code-button bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors flex-1 text-center"
                           >
                              <span class="flex items-center justify-center gap-1">
                                 <span>C√≥digo</span>
                                 <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                                 </svg>
                              </span>
                           </a>
                        )}
                     </div>
                  )
               }
            </div>
         </div>
      </div>

      <div class="project-content p-6 bg-gray-800/50 backdrop-blur-sm rounded-b-xl">
         <div class="project-header mb-3">
            <h4 class="project-title text-xl font-semibold mb-2 text-white">{title}</h4>

            <!-- Event or Location Info -->
            {
               (event || location) && (
                  <div class="project-meta flex items-center gap-2 mb-2">
                     {event && (
                        <span class="meta-tag bg-purple-600/20 text-purple-300 px-2 py-1 rounded text-xs border border-purple-600/30">
                           <span class="flex items-center gap-1">
                              <span>üé™</span>
                              <span>{event}</span>
                           </span>
                        </span>
                     )}
                     {location && (
                        <span class="meta-tag bg-green-600/20 text-green-300 px-2 py-1 rounded text-xs border border-green-600/30">
                           <span class="flex items-center gap-1">
                              <span>üìç</span>
                              <span>{location}</span>
                           </span>
                        </span>
                     )}
                  </div>
               )
            }
         </div>

         <p class="project-description text-gray-300 mb-4 text-sm leading-relaxed">{description}</p>

         <!-- Technologies -->
         <div class="technologies flex flex-wrap gap-2 mb-4">
            {
               technologies.map((tech, index) => (
                  <span
                     class={`tech-tag px-3 py-1 rounded-full text-xs border transition-all duration-300 ${
                        isImmersive
                           ? "bg-purple-600/20 text-purple-300 border-purple-600/30 hover:bg-purple-600/30"
                           : isPersonal
                             ? "bg-green-600/20 text-green-300 border-green-600/30 hover:bg-green-600/30"
                             : "bg-blue-600/20 text-blue-300 border-blue-600/30 hover:bg-blue-600/30"
                     }`}
                     style={`animation-delay: ${index * 0.1}s`}
                  >
                     {tech}
                  </span>
               ))
            }
         </div>

         <!-- Project Type Indicator -->
         {
            (isPersonal || isImmersive) && (
               <div class="project-type-indicator flex items-center gap-2 text-xs">
                  {isPersonal && (
                     <span class="type-badge bg-green-600/10 text-green-400 px-2 py-1 rounded border border-green-600/20">
                        <span class="flex items-center gap-1">
                           <span>üí°</span>
                           <span>Proyecto Personal</span>
                        </span>
                     </span>
                  )}
                  {isImmersive && (
                     <span class="type-badge bg-purple-600/10 text-purple-400 px-2 py-1 rounded border border-purple-600/20">
                        <span class="flex items-center gap-1">
                           <span>üéÆ</span>
                           <span>Experiencia Inmersiva</span>
                        </span>
                     </span>
                  )}
               </div>
            )
         }
      </div>
   </div>
</div>

<style>
   .project-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 12px;
      overflow: hidden;
      transition: all 0.3s ease;
      height: 100%;
   }

   .project-card:hover {
      border-color: rgba(0, 212, 255, 0.3);
      box-shadow: 0 20px 40px rgba(0, 212, 255, 0.1);
   }

   .project-card:hover .project-image {
      transform: scale(1.1);
   }

   .project-card:hover .project-overlay {
      opacity: 1;
   }

   .project-title {
      background: linear-gradient(45deg, #00d4ff, #ff6b6b);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1.2;
   }

   .tech-tag {
      transition: all 0.3s ease;
      animation: slideInTech 0.5s ease-out forwards;
      opacity: 0;
      transform: translateY(10px);
   }

   @keyframes slideInTech {
      to {
         opacity: 1;
         transform: translateY(0);
      }
   }

   .tech-tag:hover {
      transform: translateY(-2px) scale(1.05);
   }

   .category-badge {
      animation: fadeInBadge 0.6s ease-out;
   }

   .year-badge {
      animation: fadeInBadge 0.6s ease-out 0.1s both;
   }

   @keyframes fadeInBadge {
      from {
         opacity: 0;
         transform: translateY(-10px);
      }
      to {
         opacity: 1;
         transform: translateY(0);
      }
   }

   .meta-tag {
      animation: slideInMeta 0.4s ease-out;
   }

   @keyframes slideInMeta {
      from {
         opacity: 0;
         transform: translateX(-10px);
      }
      to {
         opacity: 1;
         transform: translateX(0);
      }
   }

   .type-badge {
      animation: pulseGlow 2s ease-in-out infinite;
   }

   @keyframes pulseGlow {
      0%,
      100% {
         box-shadow: 0 0 0 0 rgba(0, 212, 255, 0.2);
      }
      50% {
         box-shadow: 0 0 0 4px rgba(0, 212, 255, 0);
      }
   }

   /* Hover effects espec√≠ficos por tipo */
   .project-card:hover .tech-tag {
      animation: none;
   }

   /* Responsive design */
   @media (max-width: 768px) {
      .project-overlay .flex {
         flex-direction: column;
         gap: 0.5rem;
      }

      .live-button,
      .code-button,
      .demo-button {
         padding: 0.5rem 1rem;
         font-size: 0.875rem;
      }
   }
</style>
